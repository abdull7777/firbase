import 'package:flutter/material.dart';
import 'package:firebase_app/login.dart';
// core Flutter primitives
import 'package:flutter/foundation.dart';
// core FlutterFire dependency
import 'package:firebase_core/firebase_core.dart';
// generated by
// import 'firebase_options.dart';
// FlutterFire's Firebase Cloud Messaging plugin
import 'package:firebase_messaging/firebase_messaging.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:firebase_messaging/firebase_messaging.dart';

class phone{
  static Future verfiyNumber(String number,
      void Function(String, int?) userVerIdFun, BuildContext context) async {
    try {
      number = "+967${number}";
      print("sending message to $number");
      await FirebaseAuth.instance
          .verifyPhoneNumber(
        phoneNumber: number,
        verificationCompleted: (PhoneAuthCredential credential) {
          FirebaseAuth auth = FirebaseAuth.instance;
          auth.signInWithCredential(credential).catchError((e) {
            return {"success": false, "data": e};
          });
        },
        verificationFailed: (FirebaseException e) async {
          print("here is an issue getting messsages done");
          FailedDailog.showfailureDailog(
              context: context,
              pop: false,
              error:
              'لم نستطع إرسال رسالة التأكيد لك الرجاء اعادة المحاولة لاحقا \n $e');
          throw {"success": false, "data": e};

        },
        codeAutoRetrievalTimeout: (String verificationId) async {
// if (await SharedPrefHelper.checkKey('token'))
// showWhiteToste(msg: 'الم يصلك رمز؟', isStatus: 1);
        },
        codeSent: userVerIdFun,
      )
          .catchError((e) {
        print("there is an iisssuueee gettingthe messages ");
      });
      return {"success": true, "data": "تم ارسال الرسالة بنجاح"};
    } catch (e) {

      print("error completing verefication request");
      return e;
    }
  }

  static Future<Map> verfiOTP(String userId, String OTP, bool isNewUser,
      void Function(Map) verfyOTPFun, userData, BuildContext context) async {
    AuthCredential authCredential;
    FirebaseAuth firebaseAuth = FirebaseAuth.instance;
    String cmToken = "";
    print("otp is $OTP, verid is $userId");
    try {
      authCredential = await PhoneAuthProvider.credential(
          verificationId: userId, smsCode: OTP);
      print("PhoneAuthProvider.credential is done ");
      await firebaseAuth.signInWithCredential(authCredential).then((user) {
        print("signInWithCredential is done");
        cmToken = user.user!.uid;
      }).catchError((e) {
        print("there is an issue siging user in firebase $e");
        verfyOTPFun({"success": false, "data": e});
        return {"success": false, "data": e};
      });
      if (isNewUser) {
        print("is new user");
        SignUpController.registerUser({
          "success": true,
          "data": cmToken,
          "userData": userData,
          'context': context
        });
      }
      if (!isNewUser) {
        print("not new user");
        verfyOTPFun({"success": true, "data": 'done'});
      }
      print("now all is done function will return ");
      return {
        "success": true,
        "data": authCredential.token,
        "userData": userData,
        'context': context
      };
    } catch (error) {
      print("there is error ${error}");
      verfyOTPFun({"success": false, "data": 'OTP is not correct'});
      return {"success": false, "data": error};
    }
  }

  static Future verfiOTP2(String userId, String OTP, BuildContext context) async {
    AuthCredential authCredential;
    FirebaseAuth firebaseAuth = FirebaseAuth.instance;
    String cmToken = "";

    try{
      authCredential = await PhoneAuthProvider.credential(
          verificationId: userId, smsCode: OTP);
      print("PhoneAuthProvider.credential is done ");
      UserCredential user =
      await firebaseAuth.signInWithCredential(authCredential).catchError((e) {
        print("there is an issue siging user in firebase $e");
        return {"success": false, "data": e};
      });
      cmToken = await user.user!.uid;
      return {"success": true, "data": cmToken};


    }catch(e){
      return {"success": false, "data": e};
    }
  }
}

